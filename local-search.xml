<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java10   面向对象1</title>
    <link href="/2022/09/11/java%E5%9F%BA%E7%A1%80/java10/"/>
    <url>/2022/09/11/java%E5%9F%BA%E7%A1%80/java10/</url>
    
    <content type="html"><![CDATA[<p>面向过程执行：从上往下执行，用什么写什么，这些代码很长，而且效率不高，有很多重复的代码<br>解决方案：一些常用的过程能不能封装起来直接调用，不要一直重复写，这就是方法&#x2F;函数的封装</p><span id="more"></span><p>方法&#x2F;函数的封装格式：<br>概念：方法可以把相对独立的某个功能抽象出来，使之成为程序中的一个独立实体，可以在同一程序或其他程序中多次重复使用<br>类型：1、无参无返回值<br>2、有参无返回值<br>3、有参有返回<br>4、无参有返回值<br>&#x2F;&#x2F;无参无返回值<br>    public void sayHello() {<br>        System.out.println(“word”);<br>    }</p><pre><code class="hljs">//无参有返回值public String sayHello2() &#123;    return &quot;word&quot;;//只要返回值是string类型就可以&#125;//有参无返回值public void sayHello3(String name) &#123;    System.out.println(name + &quot;say world&quot;);&#125;//有参有返回值public String sayHello4(String name) &#123;    return name + &quot;say world&quot;;&#125;</code></pre><p>修饰符 返回值 方法名（参数的类型 参数的变量名）{<br>            方法体<br>}<br>修饰符：public 修饰的内容整个工程都能用，一般方法都是用public<br>返回值：可以是基础数据类型或者复合数据类型，如果没有返回值用void表示<br>         如果有 方法体中结束的时候用return返回对应内容<br>参数：可以有或者没有，如果有，格式为（参数类型 参数的变量名）</p><p>使用main调用，main方法对应类里面的方法的时候，只能调用也有static修饰的方法</p><p>调用：<br>在同一个类里面调用方法<br>gameHllo()等同与 这个类 this.gameHello()<br>如果调用其他类里面的方法<br>先实例化这个类<br>类的变量名.方法名<br>HitUtil hitUtil &#x3D; new HitUtil();<br>hitUtil.gameHello();</p><p>面向对象<br>1.隐藏细节<br>2.可重用<br>3.创建和使用</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java09 集合框架</title>
    <link href="/2022/09/10/java%E5%9F%BA%E7%A1%80/java09/"/>
    <url>/2022/09/10/java%E5%9F%BA%E7%A1%80/java09/</url>
    
    <content type="html"><![CDATA[<p>集合类是Java数据结构的实现</p><p>Java集合类允许以各种方式将元素分组，并定义了各种使用这些元素更容易操作的方法</p><p>Java集合可分为Collection和Map两种体系</p><span id="more"></span><p>Collection接口：Set:元素无序、不可重复的集合；List:元素有序，可重复的集合 - 动态数组</p><p>Map接口：具有映射关系“key-value对”的集合</p><p>List接口：扩展了Collection接口，具有顺序的集合，元素可以通过其整型下标访问，可以包含重复元素；方法分类：定位方法：get()、set()、add()、remove()、addAll();      搜索方法：indexOf()和lastIndexOf()[搜索方法不常用]</p><p>ListIterator方法：listIterator()和subList()</p><p>Set接口：是Collection的子接口，set接口没有提供额外的方法</p><p>Set集合不允许包含相同的元素，如果试把两个相同的元素加入同一个set集合中，则添加操作失败</p><p>Set实现类：HashSet</p><p>HashSet是Set接口的典型实现，大多数时候使用Set集合时都使用这个实现类</p><p>HashSet具有以下特点：不能保证元素的排序顺序；HashSet不是线程安全的；集合元素可以是null</p><p>遍历：把一个数组的所有元素全部取出来</p><p>Map接口：用于保存具有映射关系的数据：Key-Value</p><p>关键字唯一，将键映射至值得对象，每个键最多都只能映射至一个值；</p><p>基本操作：put()、get()、remove()、containsKey()、containsValue()、size()和isEmpty()</p><p>批操作：putAll()和clear()</p><p>集合视图:keySet()、values()和entrySet()</p><p>键值对：k-v    key-value</p><p>基本数据类型里面不能存null，如果没有赋值，默认是0；</p><p>Map接口常用的实现类：HashMap、TreeMap和Properties</p><p>HashMap是Map接口使用频率最高的实现类</p><p>允许使用null键和null值，与HashSet一样，不保证映射的顺序</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html02 css属性</title>
    <link href="/2022/09/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html02/"/>
    <url>/2022/09/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html02/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>前端基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java08 异常及捕获异常1</title>
    <link href="/2022/09/10/java%E5%9F%BA%E7%A1%80/java08/"/>
    <url>/2022/09/10/java%E5%9F%BA%E7%A1%80/java08/</url>
    
    <content type="html"><![CDATA[<p>异常：在Java语音中，将程序执行中发生的不正常情况称为“异常”（开发过程中的语法错误和逻辑错误不是异常）</p><p>Java程序在执行过程中所发生的异常事件可分为两类：</p><p>Error:Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。一般不编写针对性的代码进行处理；</p><span id="more"></span><p>Exception:其他因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理，列如：1空指针访问；2试图读取不存在的文件；3网络连接中断</p><p>对于这些错误，一般有两种解决方法：1遇到错误就终止程序的运行；2由程序员在编写程序时，就考虑到错误的检测、错误消息的提示及错误的处理；</p><p>捕获错误最理想的是在编译期间，但有的错误只有在运行时才会发生，比如：除数为0，数组下标越界等</p><p>分类：编译时异常和运行时异常</p><p>运行异常：指的是编译器不要求强制处理的异常。一般指编程时的逻辑错误，是程序员应该积极避免其出现的异常</p><p>java.lang.RuntimeException类及它的子类都是运行时异常</p><p>对于这类异常，可以不做处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响；</p><p>编译时异常：是指编译器要求必须处理的异常。即程序在运行时由于外界因素造成的一般性异常。编译器要求Java程序必须捕获或声明所有编译异常</p><p>对于这类异常，如果程序不处理，可能带来意想不到的结果</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">e1</span>()</span>&#123;<br>    List l = <span class="hljs-keyword">new</span> ArrayList();<br>    l.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;aa&quot;</span>);<br>    l.<span class="hljs-keyword">add</span>(<span class="hljs-number">123</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; l.size(); i++)&#123;<br>        <span class="hljs-comment">//异常处理</span><br>        String s = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//类型转换异常</span><br>            s = (String)l.<span class="hljs-keyword">get</span>(i);<span class="hljs-comment">//把认为可能出现异常的代码放入try&#123;&#125;里面</span><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<span class="hljs-comment">//定义一个Exception存到e</span><br>            System.<span class="hljs-keyword">out</span>.println(s + <span class="hljs-string">&quot;出现异常&quot;</span>);<span class="hljs-comment">//出现异常运行catch&#123;&#125;里面的代码</span><br><br>        &#125;<br>        System.<span class="hljs-keyword">out</span>.println(s);<br>    &#125;<br><br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">e2</span>()</span>&#123;<br>    <span class="hljs-comment">//空指针异常</span><br>    User u = <span class="hljs-literal">null</span>;<br>    u.setName(<span class="hljs-string">&quot;123&quot;</span>);<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">e3</span>()</span>&#123;<br>    <span class="hljs-comment">//除数为0异常</span><br>    <span class="hljs-built_in">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">int</span> b = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(a / b);<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;出现问题&quot;</span>);<br>    &#125;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;============&quot;</span>);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">e4</span>()</span>&#123;<br>    <span class="hljs-comment">//数组越界异常</span><br>    <span class="hljs-built_in">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<span class="hljs-comment">//下标只有0,1,2</span><br>    System.<span class="hljs-keyword">out</span>.println(arr[<span class="hljs-number">3</span>]);<span class="hljs-comment">//这里是3</span><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>捕获异常（1）</p><p>try：</p><p>捕获异常第一步是用try{…}语句块选定捕获异常的范围，将可能出现异常的代码放在try语句块中</p><p>catch(Exceptiontype e){…}</p><p>在catch语句块中对异常对象进行处理的代码。每个try语句块可以伴随一个或多个catch语句，用于处理可能产生不同类型的异常对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">e5</span>()</span>&#123;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        User u = <span class="hljs-literal">null</span>;<br>        u.setName(<span class="hljs-string">&quot;123&quot;</span>);<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-number">1</span> / <span class="hljs-number">0</span>);<br>    &#125;<span class="hljs-keyword">catch</span> (NullPointerException e1)&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;空指针异常&quot;</span>);<br>    &#125;<span class="hljs-keyword">catch</span> (ArithmeticException e2)&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;除数为0&quot;</span>);<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//这里面的代码保证运行</span><br>        <span class="hljs-comment">//无论try&#123;&#125;里面是否有异常什么情况都会运行</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;finally&quot;</span>);<br><br>    &#125;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;======&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>捕获异常（2）：</p><p>与其他对象一样，可以访问一个异常对象的成员变量或调用它的方法：</p><p>getMessage()获取异常信息，返回字符串</p><p>printStackTrace()获取异常类名和异常信息，以及异常出现在程序中的位置，返回值void</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html01 HTML基本指令</title>
    <link href="/2022/09/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html01/"/>
    <url>/2022/09/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/html01/</url>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--...--&gt;</span>  定义注释<br><br><span class="hljs-meta">&lt;!DOCTYPE&gt;</span>定义文档类型<br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span> 定义超文本链接<br><br><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span>&gt;</span>定义缩写<br><br><span class="hljs-tag">&lt;<span class="hljs-name">acronym</span>&gt;</span>定义只取首字母的缩写，不支持HTML5<br><br><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>定义文档作者或拥有者的联系信息<br></code></pre></td></tr></table></figure><span id="more"></span><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-symbol">&lt;applet&gt;</span>HTML5中不赞成使用。定义嵌入的 applet。<br><br><span class="hljs-symbol">&lt;area&gt;</span>定义图像映射内部的区域<br><br><span class="hljs-symbol">&lt;article&gt;</span>定义一个文章区域<br><br><span class="hljs-symbol">&lt;aside&gt;</span>定义页面的侧边栏内容<br><br><span class="hljs-symbol">&lt;audio&gt;</span>定义音频内容<br><br><span class="hljs-symbol">&lt;b&gt;</span>定义文本粗体<br><br><span class="hljs-symbol">&lt;base&gt;</span>定义页面中所有链接的默认地址或默认目标<br><br><span class="hljs-symbol">&lt;basefont&gt;</span>HTML5不支持，不赞成使用。定义页面中文本的默认字体、颜色或尺寸<br><br><span class="hljs-symbol">&lt;bdi&gt;</span>New允许您设置一段文本，使其脱离其父元素的文本方向设置<br><br><span class="hljs-symbol">&lt;bdo&gt;</span>定义文字方向<br><br><span class="hljs-symbol">&lt;big&gt;</span>定义大号文本，HTML5不支持<br><br><span class="hljs-symbol">&lt;blockquote&gt;</span>定义长的引用<br><br><span class="hljs-symbol">&lt;body&gt;</span>定义文档的主体<br><br><span class="hljs-symbol">&lt;br&gt;</span>定义换行<br><br><span class="hljs-symbol">&lt;button&gt;</span>定义一个点击按钮<br><br><span class="hljs-symbol">&lt;canvas&gt;</span>New定义图形，比如图表和其他图像,标签只是图形容器，您必须使用脚本来绘制图形<br><br><span class="hljs-symbol">&lt;caption&gt;</span>定义表格标题<br><br><span class="hljs-symbol">&lt;center&gt;</span>HTML5不支持，不赞成使用。定义居中文本。<br><br><span class="hljs-symbol">&lt;cite&gt;</span>定义引用(citation)<br><br><span class="hljs-symbol">&lt;code&gt;</span>定义计算机代码文本<br><br><span class="hljs-symbol">&lt;col&gt;</span>定义表格中一个或多个列的属性值<br><br><span class="hljs-symbol">&lt;colgroup&gt;</span>定义表格中供格式化的列组<br><br><span class="hljs-symbol">&lt;command&gt;</span>New定义命令按钮，比如单选按钮、复选框或按钮<br><br><span class="hljs-symbol">&lt;datalist&gt;</span>New定义选项列表。请与 <span class="hljs-built_in">input</span> 元素配合使用该元素，来定义 <span class="hljs-built_in">input</span> 可能的值。<br><br><span class="hljs-symbol">&lt;dd&gt;</span>定义定义列表中项目的描述<br><br><span class="hljs-symbol">&lt;del&gt;</span>定义被删除文本<br><br><span class="hljs-symbol">&lt;details&gt;</span>New用于描述文档或文档某个部分的细节<br><br><span class="hljs-symbol">&lt;dfn&gt;</span>定义定义项目<br><br><span class="hljs-symbol">&lt;dialog&gt;</span>New定义对话框，比如提示框<br><br><span class="hljs-symbol">&lt;dir&gt;</span>HTML5不支持，不赞成使用。定义目录列表。<br><br><span class="hljs-symbol">&lt;div&gt;</span>定义文档中的节<br><br><span class="hljs-symbol">&lt;dl&gt;</span>定义列表详情<br><br><span class="hljs-symbol">&lt;dt&gt;</span>定义列表中的项目<br><br><span class="hljs-symbol">&lt;em&gt;</span>定义强调文本<br><br><span class="hljs-symbol">&lt;embed&gt;</span>定义嵌入的内容，比如插件。<br><br><span class="hljs-symbol">&lt;fieldset&gt;</span>定义围绕表单中元素的边框<br><br><span class="hljs-symbol">&lt;figcaption&gt;</span>定义<span class="hljs-symbol">&lt;figure&gt;</span> 元素的标题<br><br><span class="hljs-symbol">&lt;figure&gt;</span>New规定独立的流内容（图像、图表、照片、代码等等）。<br><br><span class="hljs-symbol">&lt;font&gt;</span>HTML5不支持，不赞成使用。定义文字的字体、尺寸和颜色。<br><br><span class="hljs-symbol">&lt;footer&gt;</span>定义 section 或 document 的页脚。<br><br><span class="hljs-symbol">&lt;form&gt;</span>定义了HTML文档的表单<br><br><span class="hljs-symbol">&lt;frame&gt;</span>定义框架集的窗口或框架<br><br><span class="hljs-symbol">&lt;frameset&gt;</span>定义框架集<br><br><span class="hljs-symbol">&lt;h1&gt;</span> <span class="hljs-keyword">to</span> <span class="hljs-symbol">&lt;h6&gt;</span>定义 HTML 标题<br><br><span class="hljs-symbol">&lt;head&gt;</span>定义关于文档的信息<br><br><span class="hljs-symbol">&lt;header&gt;</span> 定义了文档的头部区域<br><br><span class="hljs-symbol">&lt;hr&gt;</span>定义水平线<br><br><span class="hljs-symbol">&lt;html&gt;</span>定义 HTML 文档<br><br><span class="hljs-symbol">&lt;i&gt;</span>定义斜体字<br><br><span class="hljs-symbol">&lt;iframe&gt;</span>定义内联框架<br><br><span class="hljs-symbol">&lt;img&gt;</span>定义图像<br><br><span class="hljs-symbol">&lt;input&gt;</span>定义输入控件<br><br><span class="hljs-symbol">&lt;ins&gt;</span>定义被插入文本<br><br><span class="hljs-symbol">&lt;kbd&gt;</span>定义键盘文本<br><br><span class="hljs-symbol">&lt;keygen&gt;</span>规定用于表单的密钥对生成器字段。<br><br><span class="hljs-symbol">&lt;label&gt;</span>定义 <span class="hljs-built_in">input</span> 元素的标注<br><br><span class="hljs-symbol">&lt;legend&gt;</span>定义 fieldset 元素的标题。<br><br><span class="hljs-symbol">&lt;li&gt;</span>定义列表的项目<br><br><span class="hljs-symbol">&lt;link&gt;</span>定义文档与外部资源的关系<br><br><span class="hljs-symbol">&lt;main&gt;</span>定义文档的主体部分。<br><br><span class="hljs-symbol">&lt;map&gt;</span>定义图像映射<br><br><span class="hljs-symbol">&lt;mark&gt;</span>定义带有记号的文本。请在需要突出显示文本时使用 <span class="hljs-symbol">&lt;em&gt;</span> 标签。<br><br><span class="hljs-symbol">&lt;menu&gt;</span>不赞成使用。定义菜单列表。<br><br><span class="hljs-symbol">&lt;meta&gt;</span>定义关于 HTML 文档的元信息。<br><br><span class="hljs-symbol">&lt;meter&gt;</span>定义度量衡。仅用于已知最大和最小值的度量。<br><br><span class="hljs-symbol">&lt;nav&gt;</span>定义导航链接的部分<br><br><span class="hljs-symbol">&lt;noframes&gt;</span>定义针对不支持框架的用户的替代内容。HTML5不支持<br><br><span class="hljs-symbol">&lt;noscript&gt;</span>定义针对不支持客户端脚本的用户的替代内容。<br><br><span class="hljs-symbol">&lt;object&gt;</span>定义内嵌对象<br><br><span class="hljs-symbol">&lt;ol&gt;</span>定义有序列表。<br><br><span class="hljs-symbol">&lt;optgroup&gt;</span>定义选择列表中相关选项的组合。<br><br><span class="hljs-symbol">&lt;option&gt;</span>定义选择列表中的选项。<br><br><span class="hljs-symbol">&lt;output&gt;</span>定义不同类型的输出，比如脚本的输出。<br><br><span class="hljs-symbol">&lt;p&gt;</span>定义段落。<br><br><span class="hljs-symbol">&lt;param&gt;</span>定义对象的参数。<br><br><span class="hljs-symbol">&lt;pre&gt;</span>定义预格式文本。<br><br><span class="hljs-symbol">&lt;progress&gt;</span>定义运行中的进度（进程）。<br><br><span class="hljs-symbol">&lt;q&gt;</span>定义短的引用。<br><br><span class="hljs-symbol">&lt;rp&gt;</span>New<span class="hljs-symbol">&lt;rp&gt;</span> 标签在 <span class="hljs-keyword">ruby</span> 注释中使用，以定义不支持 <span class="hljs-keyword">ruby</span> 元素的浏览器所显示的内容。<br><br><span class="hljs-symbol">&lt;rt&gt;</span>New<span class="hljs-symbol">&lt;rt&gt;</span> 标签定义字符（中文注音或字符）的解释或发音。<br><br><span class="hljs-symbol">&lt;ruby&gt;</span>New<span class="hljs-symbol">&lt;ruby&gt;</span> 标签定义 <span class="hljs-keyword">ruby</span> 注释（中文注音或字符）。<br><br><span class="hljs-symbol">&lt;s&gt;</span>不赞成使用。定义加删除线的文本。<br><br><span class="hljs-symbol">&lt;samp&gt;</span>定义计算机代码样本。<br><br><span class="hljs-symbol">&lt;script&gt;</span>定义客户端脚本。<br><br><span class="hljs-symbol">&lt;section&gt;</span><span class="hljs-symbol">&lt;section&gt;</span> 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。<br><br><span class="hljs-symbol">&lt;select&gt;</span>定义选择列表（下拉列表）。<br><br><span class="hljs-symbol">&lt;small&gt;</span>定义小号文本。<br><br><span class="hljs-symbol">&lt;source&gt;</span>New<span class="hljs-symbol">&lt;source&gt;</span> 标签为媒介元素（比如 <span class="hljs-symbol">&lt;video&gt;</span> 和 <span class="hljs-symbol">&lt;audio&gt;</span>）定义媒介资源。<br><br><span class="hljs-symbol">&lt;span&gt;</span>定义文档中的节。<br><br><span class="hljs-symbol">&lt;strike&gt;</span>HTML5不支持，不赞成使用。定义加删除线文本。<br><br><span class="hljs-symbol">&lt;strong&gt;</span>定义强调文本。<br><br><span class="hljs-symbol">&lt;style&gt;</span>定义文档的样式信息。<br><br><span class="hljs-symbol">&lt;sub&gt;</span>定义下标文本。<br><br><span class="hljs-symbol">&lt;summary&gt;</span>  标签包含 details 元素的标题，<span class="hljs-string">&quot;details&quot;</span> 元素用于描述有关文档或文档片段的详细信息。<br><br><span class="hljs-symbol">&lt;sup&gt;</span>定义上标文本。<br><br><span class="hljs-symbol">&lt;table&gt;</span>定义表格。<br><br><span class="hljs-symbol">&lt;tbody&gt;</span>定义表格中的主体内容。<br><br><span class="hljs-symbol">&lt;td&gt;</span>定义表格中的单元。<br><br><span class="hljs-symbol">&lt;textarea&gt;</span>定义多行的文本输入控件。<br><br><span class="hljs-symbol">&lt;tfoot&gt;</span>定义表格中的表注内容（脚注）。<br><br><span class="hljs-symbol">&lt;th&gt;</span>定义表格中的表头单元格。<br><br><span class="hljs-symbol">&lt;thead&gt;</span>定义表格中的表头内容。<br><br><span class="hljs-symbol">&lt;time&gt;</span>定义日期或时间，或者两者。<br><br><span class="hljs-symbol">&lt;template&gt;</span>定义在页面加载时隐藏的一些内容。<br><br><span class="hljs-symbol">&lt;title&gt;</span>定义文档的标题。<br><br><span class="hljs-symbol">&lt;tr&gt;</span>定义表格中的行。<br><br><span class="hljs-symbol">&lt;track&gt;</span> 标签为诸如 video 元素之类的媒介规定外部文本轨道。<br><br><span class="hljs-symbol">&lt;tt&gt;</span>定义打字机文本。<br><br><span class="hljs-symbol">&lt;u&gt;</span>不赞成使用。定义下划线文本。<br><br><span class="hljs-symbol">&lt;ul&gt;</span>定义无序列表。<br><br><span class="hljs-symbol">&lt;var&gt;</span>定义文本的变量部分。<br><br><span class="hljs-symbol">&lt;video&gt;</span> 标签定义视频，比如电影片段或其他视频流。<br><br><span class="hljs-symbol">&lt;wbr&gt;</span>规定在文本中的何处适合添加换行符。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java07 java泛型</title>
    <link href="/2022/09/10/java%E5%9F%BA%E7%A1%80/java07/"/>
    <url>/2022/09/10/java%E5%9F%BA%E7%A1%80/java07/</url>
    
    <content type="html"><![CDATA[<p>Java笔记5（泛型）</p><p>Map实现类：Properites</p><p>properties类是Hashtable的子类，该对象用于处理属性文件</p><span id="more"></span><p>Map实现类：Properites</p><p>properties类是Hashtable的子类，该对象用于处理属性文件</p><p>由于属性文件里的key、value都是字符串类型，所以Properites里的key和value都是字符串类型</p><p>存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法</p><p>Iterator接口</p><p>Iterator对象称为迭代器，主要用于遍历Collection集合中的元素</p><p>所有实现了Collection接口的集合类都有一个iterator()方法，用于返回一个实现了Iterator接口的对象</p><p>Iterator仅用于遍历集合，Iterator本身并不提供承装对象的能力，如果需要创建Iterator对象，则必须有一个被迭代的集合</p><p>泛型：</p><p>JDK1.5新加入的，解决数据类型的安全性问题，其中主要原理是在类声明时通过一个标识表示类中某个属性的类型或者某个方法的返回值及参数类型，这样在类声明或实例化时只要指定好需要的具体的类型即可</p><p>泛型好处：</p><p>1可读性，可以判断集合中的内容类型；</p><p>2类型检查，避免插入非法类型；</p><p>3获取数据时不在需要强制类型转换；</p><p>4类型安全，通过知道使用泛型定义的变量的类型限制，编译器可以更有效地提高Java程序的类型安全；</p><p>5提高性能</p><p>泛型接口：</p><p>泛型接口与泛型类的定义及使用基本相同，泛型接口常被用在各种类的生产器中：</p><p>定义一个泛型接口：</p><p>public interface Generator{</p><p>public T next();</p><p>}</p><p>泛型方法：</p><p>&#x2F;&#x2F;不借助泛型类来写泛型方法 public class Demo04 {      </p><p>  public<T> T goGo(T str) {               </p><p> return str;            </p><p>}        </p><p>public &lt;K,V&gt; K gogo(K str,V aa) {    </p><p>​    return str; </p><p>}     </p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java06 Java继承</title>
    <link href="/2022/09/03/java%E5%9F%BA%E7%A1%80/java06/"/>
    <url>/2022/09/03/java%E5%9F%BA%E7%A1%80/java06/</url>
    
    <content type="html"><![CDATA[<p>继承就是子<a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E7%BB%A7%E6%89%BF&spm=1001.2101.3001.7020">类继承</a>父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p><span id="more"></span><p>继承的作用：通过继承可以快速创建新的类，实现代码的重用，提高程序的可维护性，节省大量创建新类的时间，提高开发效率和开发质量。</p><ul><li>子类不能选择性继承父类；</li><li>Java不支持多重继承，但一个类可以实现多个接口，从而克服单继承的缺点；</li><li>构造方法不会被子类继承，但可以从子类中调用父类的构造方法。</li></ul><p>继承的优点<br>继承过来的字段和方法，可以像任何其他字段和方法一样被直接使用；<br>在子类中可以声明一个与父类中同名的新字段或静态方法，从而“隐藏”父类中的字段或方法；<br>可以在子类中声明一个在父类中没有的新字段和方法；<br>可以在子类中编写一个父类当中具有相同名的新实例方法，这称为“方法重写”或“方法覆盖”；<br>可以在子类中编写一个调用父类构造方法的子类构造方法，既可以隐式地实现，也可以通过使用关键字super来实现。</p><p>package com.yunshen.demo;</p><p>public class Animal {&#x2F;&#x2F;父类 放动物共有的属性</p><pre><code class="hljs">//属性private String name;private int age;private int hp;private int sex;//构造方法public Animal() &#123;    // TODO Auto-generated constructor stub    System.out.println(&quot;这是Animal的无参构造&quot;);&#125;public Animal(String name, int age, int hp, int sex) &#123;    super();    this.name = name;    this.age = age;    this.hp = hp;    this.sex = sex;&#125;//成员方法public void eat() &#123;    System.out.println(&quot;动物吃的方法&quot;);&#125;public void sleep() &#123;    System.out.println(&quot;动物睡的方法&quot;);&#125;public void run() &#123;    System.out.println(&quot;动物跑的方法&quot;);&#125;public String getName() &#123;    return name;&#125;public void setName(String name) &#123;    this.name = name;&#125;public int getAge() &#123;    return age;&#125;public void setAge(int age) &#123;    this.age = age;&#125;public int getHp() &#123;    return hp;&#125;public void setHp(int hp) &#123;    this.hp = hp;&#125;public int getSex() &#123;    return sex;&#125;public void setSex(int sex) &#123;    this.sex = sex;&#125;@Overridepublic String toString() &#123;    return &quot;Animal [name=&quot; + name + &quot;, age=&quot; + age + &quot;, hp=&quot; + hp + &quot;, sex=&quot; + sex + &quot;]&quot;;&#125;</code></pre><p>}</p><p>package com.yunshen.demo;</p><p>public class Cat extends Animal{&#x2F;&#x2F;Cat 继承 Animal</p><pre><code class="hljs">public Cat () &#123;    System.out.println(&quot;Cat的构造方法&quot;);&#125;public void eat() &#123;    System.out.println(&quot;猫吃老鼠&quot;);&#125;</code></pre><p>}</p><p>package com.yunshen.demo;</p><p>public class Snake extends Animal {</p><pre><code class="hljs">private int sp;public Snake() &#123;    // TODO Auto-generated constructor stub&#125;public Snake(String name, int age, int hp, int sex) &#123;    // TODO Auto-generated constructor stub&#125;public void px() &#123;    System.out.println(&quot;爬行&quot;);&#125;public int getSp() &#123;    return sp;&#125;public void setSp(int sp) &#123;    this.sp = sp;&#125;</code></pre><p>}</p><p>package com.yunshen.demo;</p><p>public class Test {</p><pre><code class="hljs">public static void main(String[] args) &#123;</code></pre><p>&#x2F;&#x2F;Animal an &#x3D; new Animal();<br>&#x2F;&#x2F;an.setHp(1000);<br>&#x2F;&#x2F;an.eat();</p><pre><code class="hljs">    System.out.println(&quot;------Cat-----&quot;);    /*     *      * 构造子类对象的时候，父类的构造方法会被执行     * 如果子类也有父类一样的方法，就会使用子类自己的方法     *      */    Cat cat = new Cat();    cat.eat();    cat.setName(&quot;加菲&quot;);    System.out.println(cat.getName());        System.out.println(&quot;------Snake----&quot;);        /*     *      * 继承父类的同时，子类对象本身也可以拥有自己的属性和方法     *      */    Snake s = new Snake();    s.eat();    s.px();//自己的方法    s.getSp();//自己独有的属性    s.setHp(500);    System.out.println(s.getHp());        /*     * 总结：     * 属性：     * 如果父类有，子类没有，那么子类直接继承父类的属性，如果子类有，那么就用自己的属性     *      * 方法：     * 如果父类有方法，子类没有，那就用父类的方法，如果子类也有这个方法，，那么子类就执行自己的方法     *      * 方法的重写：     * 子类和父类的方法具有相同的名字、参数、类型及个数还有返回值也相同     *      */    &#125;</code></pre><p>}</p><p>package com.yunshen.demo;</p><p>public class Test2 {</p><pre><code class="hljs">public static void main(String[] args) &#123;        Animal animal = new Animal();    animal.setName(&quot;动物&quot;);        Animal an = new Cat();    an.eat();        Cat cat = (Cat) an;//(强制转换)向下转型，父类转成子类    cat.eat();&#125;</code></pre><p>}</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java05 java快速生成无参与有参构造，快速构建get和set</title>
    <link href="/2022/08/31/java%E5%9F%BA%E7%A1%80/java05/"/>
    <url>/2022/08/31/java%E5%9F%BA%E7%A1%80/java05/</url>
    
    <content type="html"><![CDATA[<p>Tostring的使用：</p><p>在需要使用tostring的实体类里面的空白处右键-找到source-找到Generate toString-选择所以属性，点击 Gennerate即可</p><span id="more"></span><p>快速生成无参与有参构造</p><p>无参：右键–source–generate constructors form Superclass–点击generated</p><p><img src="/../imgs/java05/c9abbcffdcca49c4bfab2480d254dc2e.jpeg" alt="c9abbcffdcca49c4bfab2480d254dc2e"></p><p><img src="/../imgs/java05/571b3c3687924d6faccde3f349f3aa7b.jpeg" alt="571b3c3687924d6faccde3f349f3aa7b"></p><p>有参：右键–source–generate constructor using Field–点击generated</p><p><img src="/../imgs/java05/e256cd0683c14eb5a461760bd4e3c676.jpeg" alt="e256cd0683c14eb5a461760bd4e3c676"></p><p><img src="/../imgs/java05/7c31ff39c6ce45d494c55c98dd521822.jpeg" alt="7c31ff39c6ce45d494c55c98dd521822"></p><p>一般实体类的属性都是私有化的，提供公有的方法进行访问，方法快速构建如下：</p><p>快速构建get和set：空白处–右键–source–generated getter and setter–选择让外部类访问的属性–点击generated</p><p><img src="/../imgs/java05/e256cd0683c14eb5a461760bd4e3c676-16619546427245.jpeg" alt="e256cd0683c14eb5a461760bd4e3c676"></p><p><img src="/../imgs/java05/571b3c3687924d6faccde3f349f3aa7b-16619546633807.jpeg" alt="571b3c3687924d6faccde3f349f3aa7b"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java04 java方法/函数封装</title>
    <link href="/2022/08/31/java%E5%9F%BA%E7%A1%80/java04/"/>
    <url>/2022/08/31/java%E5%9F%BA%E7%A1%80/java04/</url>
    
    <content type="html"><![CDATA[<p>方法&#x2F;函数的封装格式：</p><p>概念：方法可以把相对独立的某个功能抽象出来，使之成为程序中的一个独立实体，可以在同一程序或其他程序中多次重复使用</p><p>类型：1、无参无返回值</p><span id="more"></span><p>有参无返回值<br>有参有返回<br>无参有返回值</p><p>修饰符 返回值 方法名（参数的类型 参数的变量名）{</p><p>方法体</p><p>}</p><p>修饰符：public 修饰，一般方法都是用public</p><p>返回值：可以是基础数据类型或者复合数据类型，如果没有返回值用void表示</p><p> 如果有 方法体中结束的时候用return返回对应内容</p><p>参数：可以有或者没有，如果有，格式为（参数类型 参数的变量名）</p><p>使用main调用，main方法对应类里面的方法的时候，只能调用也有static修饰的方法</p><p>调用：</p><p>在同一个类里面调用方法</p><p>gameHllo()等同与 这个类 this.gameHello()</p><p>如果调用其他类里面的方法</p><p>先实例化这个类</p><p>类的变量名.方法名</p><p>package com.yunshen.home;</p><p>public class HomeUtil {</p><pre><code class="hljs">//第一题public void showLove(int item) &#123;//item为形参    for (int i = 0; i &lt; item; i++) &#123;        System.out.println(&quot;云神&quot;);    &#125;&#125;//第二题public void ps(String str) &#123;//形参，只有在后面的括号中可以使用,在调用方法的时候，传入的是实参        System.out.println(str);    &#125;</code></pre><p>​<br>    &#x2F;&#x2F;第三题<br>    public void showIntArr(int [] arr) {<br>        System.out.print(“arr中的值”);<br>        for (int i &#x3D; 0; i &lt; arr.length; i++) {<br>            System.out.print(arr[i] + “ “);<br>        }<br>    }</p><pre><code class="hljs">//第四题public void showCharArr2(char[][] chr) &#123;    // TODO Auto-generated method stub        for (int i = 0; i &lt; chr.length; i++) &#123;        for (int j = 0; j &lt; chr.length; j++) &#123;            System.out.print(chr[i][j] + &quot; &quot;);        &#125;        System.out.println();    &#125;&#125;</code></pre><p>​<br>​<br>​<br>    &#x2F;&#x2F;第7题<br>    public int findMax(int[] arr) {<br>        &#x2F;&#x2F; TODO Auto-generated method stub</p><pre><code class="hljs">    int max = 0;    for (int i = 0; i &lt; arr.length; i++) &#123;        if (arr[i] &gt; max) &#123;            max = arr[i];        &#125;    &#125;    return max;    &#125;</code></pre><p>​<br>    &#x2F;&#x2F;第9题<br>    public int[] addNum(int num, int[] arr) {<br>        &#x2F;&#x2F; TODO Auto-generated method stub</p><pre><code class="hljs">    //获取新数组    int [] newArr = new int [arr.length + 1];    for (int i = 0; i &lt; arr.length; i++) &#123;        newArr[i] = arr[i];//把旧数组放到新数组    &#125;    newArr[newArr.length - 1] = num;//newArr.length - 1是数组的最后一位数    return newArr;&#125;package com.yunshen.home;</code></pre><p>import java.util.Scanner;</p><p>&#x2F;*</p><p> * </p><ul><li>在main方法中根据键盘插入一个1-3000之间的数字n，另外写一个方法showLove，传入这个n，循环n次“云神”</li><li> *&#x2F;</li></ul><p>public class Home1 {<br>    public static void main(String[] args) {</p><pre><code class="hljs">    Scanner scanner = new Scanner(System.in);    System.out.println(&quot;输入一个1-3000之间的数字&quot;);    int num = scanner.nextInt();    if (num &gt; 0 &amp;&amp; num &lt;3000) &#123;        /*        for (int i = 0; i &lt; num; i++) &#123;            System.out.println(&quot;云神&quot;);        &#125;        */                //实例化工具    HomeUtil hu = new HomeUtil();    hu.showLove(num);        &#125;else &#123;        System.out.println(&quot;输入有误&quot;);    &#125;</code></pre><p>​<br>​<br>​<br>​<br>    }</p><p>}<br>    package com.yunshen.home;</p><p>import java.util.Scanner;<br>&#x2F;*</p><p> * </p><ul><li>在main方法中定义一个字符串，另外写一个方法ps，传入这个字符串，此方法专门负责将传入的字符串打印出来</li><li> *&#x2F;</li></ul><p>public class Home2 {</p><pre><code class="hljs">public static void main(String[] args) &#123;     String str = &quot;我是个字符串&quot;;     // 实例化工具    HomeUtil hu = new HomeUtil();    hu.ps(str); &#125;</code></pre><p>}<br>    package com.yunshen.home;</p><p>&#x2F;*</p><p> * </p><ul><li>在main方法中定义一个数组，写一个方法showInterArr,专门用来遍历int类型的一维数组</li><li> *&#x2F;</li></ul><p>public class Home3 {<br>    public static void main(String[] args) {</p><pre><code class="hljs">    int [] arr = &#123;1,22,333,44,5&#125;;    HomeUtil hu = new HomeUtil();    hu.showIntArr(arr);</code></pre><p>​<br>    }</p><p>}</p><pre><code class="hljs">package com.yunshen.home;</code></pre><p>&#x2F;*</p><p> * </p><ul><li>写一个方法showCharArr2,专门用来遍历char类型的二维数组</li><li> *&#x2F;<br>public class Home4 {<br>public static void main(String[] args) {<pre><code class="hljs">char [][] chr = &#123;        &#123;&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;&#125;,        &#123;&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;&#125;,        &#123;&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;&#125;,        &#123;&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;&#125;,        &#123;&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;,&#39;0&#39;&#125;&#125;;HomeUtil hu = new HomeUtil();hu.showCharArr2(chr);</code></pre>​<br>}</li></ul><p>}<br>    package com.yunshen.home;<br>&#x2F;*</p><p> * </p><ul><li>7.在main方法中有一个int类型的一维数组，写一个方法findMax,用于获取数组中的最大值，调用方法之后将返回的最大值赋值给一个变量a，把a打印出来</li><li>*&#x2F;</li></ul><p>public class Home5 {<br>    public static void main(String[] args) {</p><pre><code class="hljs">    int [] arr = &#123;1,-43,23,345,34&#125;;</code></pre><p>​<br>        HomeUtil hu &#x3D; new HomeUtil();<br>        int a &#x3D; hu.findMax(arr);<br>        System.out.println(a);</p><pre><code class="hljs">&#125;</code></pre><p>}<br>    package com.yunshen.home;</p><p>import java.util.Scanner;</p><p>&#x2F;*</p><p> * </p><ul><li>9.在main方法中定义一个int类型的一维数组，根据键盘输入一个数字，写一个方法addNum，传入这个数字和数组，把这个</li><li>数字加到这个数组的末尾，之后在main方法中调用addNum的方法把返回的数组赋值给原来的数组，并遍历原来的数组</li><li></li><li> *&#x2F;<br> public class Home9 {<br> public static void main(String[] args) {<pre><code class="hljs"> int [] arr = &#123;1,22,33,44,555,6&#125;; Scanner scanner = new Scanner(System.in); System.out.println(&quot;输入一个数字:&quot;);  HomeUtil hu = new HomeUtil(); int num = scanner.nextInt();  arr = hu.addNum(num,arr); for (int i = 0; i &lt; arr.length; i++) &#123;         System.out.print(arr[i] + &quot; &quot;);     &#125;</code></pre> }</li></ul><p>}</p><p>}</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java03 求一个数组的最大值</title>
    <link href="/2022/08/31/java%E5%9F%BA%E7%A1%80/java03/"/>
    <url>/2022/08/31/java%E5%9F%BA%E7%A1%80/java03/</url>
    
    <content type="html"><![CDATA[<p>package com.yunshen.demo;</p><p>public class Test2 {<br>    public static void main(String[] args) {</p><pre><code class="hljs">    //静态初始化    int [] array = &#123;1,2,3,4,5,6,7,8,9,10&#125;;</code></pre><p>​<br>​        &#x2F;&#x2F;遍历数组<br>​        for (int i &#x3D; 0; i &lt; array.length; i++) {<br>​            System.out.println(array[i] + “ “);<br>​        }<br>​<br>​        &#x2F;&#x2F;求和<br>​        int sum &#x3D; 0;<br>​        for (int i &#x3D; 0; i &lt; array.length; i++) {<br>​            sum &#x3D; array[i] + sum;&#x2F;&#x2F;sum +&#x3D; array[i];<br>​        }<br>​        System.out.println(“和为：” +sum);<br>​        </p><pre><code class="hljs">    System.out.println(&quot;-----------&quot;);        //求数组的最大值    int [] array2 = &#123;-10,-5,2,20,5,100,13,14,10&#125;;    int max = array2[0];//假设第一个值是最大的，然后逐一往后比    for (int i = 0; i &lt; array2.length; i++) &#123;                if (max &lt; array2[i]) &#123;            max = array2[i];        &#125;    &#125;    System.out.println(max);</code></pre><p>​<br>​    }</p><p>}</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java02 输出一个九九乘法表</title>
    <link href="/2022/08/31/java%E5%9F%BA%E7%A1%80/java02/"/>
    <url>/2022/08/31/java%E5%9F%BA%E7%A1%80/java02/</url>
    
    <content type="html"><![CDATA[<p>package com.yunshen.home;</p><p>public class Shape1 {<br>    public static void main(String[] args) {</p><pre><code class="hljs">    for (int i = 1; i &lt; 10; i++) &#123;        for (int j = 1; j &lt; i+1; j++) &#123;            System.out.print(i + &quot;*&quot; +j + &quot;=&quot; + i * j + &quot; &quot;);        &#125;        System.out.println(&quot; &quot;);    &#125;&#125;</code></pre><p>}</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java01 random随机数</title>
    <link href="/2022/08/31/java%E5%9F%BA%E7%A1%80/java01/"/>
    <url>/2022/08/31/java%E5%9F%BA%E7%A1%80/java01/</url>
    
    <content type="html"><![CDATA[<p>如果要生成一个0-9之间的随机数:</p><p>Random ran &#x3D; new Random(); &#x2F;&#x2F;先实例化random对象</p><p>int num &#x3D; ran.nextInt(10); &#x2F;&#x2F;括号里面是范围，范围在0-9</p><p>System.out.println(num);</p><p>如果要生成一个1-10之间的随机数:</p><p>Random ran &#x3D; new Random(); &#x2F;&#x2F;先实例化random对象</p><p>int num2 &#x3D; ran.nextInt(10)+1; &#x2F;&#x2F;范围在1-10</p><p>System.out.println(num2)</p>]]></content>
    
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/31/hello-world/"/>
    <url>/2022/08/31/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
